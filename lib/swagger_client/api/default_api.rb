=begin
#Mautic API docs

#Auto-generated Swagger documentation.

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_assets_batch_delete_delete(opts = {})
      api_assets_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_assets_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_assets_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/assets/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_assets_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_assets_batch_edit_patch(opts = {})
      api_assets_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_assets_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_assets_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/assets/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_assets_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_assets_batch_edit_put(opts = {})
      api_assets_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_assets_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_assets_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/assets/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_assets_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_assets_batch_new_post(opts = {})
      api_assets_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_assets_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_assets_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/assets/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_assets_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_assets_get(opts = {})
      api_assets_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_assets_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_assets_get ...'
      end
      # resource path
      local_var_path = '/api/assets'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_assets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_assets_id_delete_delete(id, opts = {})
      api_assets_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_assets_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_assets_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_assets_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_assets_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/assets/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_assets_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_assets_id_edit_patch(id, opts = {})
      api_assets_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_assets_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_assets_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_assets_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_assets_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/assets/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_assets_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_assets_id_edit_put(id, opts = {})
      api_assets_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_assets_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_assets_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_assets_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_assets_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/assets/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_assets_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_assets_id_get(id, opts = {})
      api_assets_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_assets_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_assets_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_assets_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_assets_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/assets/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_assets_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_assets_new_post(opts = {})
      api_assets_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_assets_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_assets_new_post ...'
      end
      # resource path
      local_var_path = '/api/assets/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_assets_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_batch_delete_delete(opts = {})
      api_campaigns_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/campaigns/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_batch_edit_patch(opts = {})
      api_campaigns_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/campaigns/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_batch_edit_put(opts = {})
      api_campaigns_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/campaigns/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_batch_new_post(opts = {})
      api_campaigns_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/campaigns/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of events.
    # @param campaign_id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_campaign_id_events_contact_contact_id_get(campaign_id, contact_id, opts = {})
      api_campaigns_campaign_id_events_contact_contact_id_get_with_http_info(campaign_id, contact_id, opts)
      nil
    end

    # Get a list of events.
    # @param campaign_id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_campaign_id_events_contact_contact_id_get_with_http_info(campaign_id, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_campaign_id_events_contact_contact_id_get ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling DefaultApi.api_campaigns_campaign_id_events_contact_contact_id_get"
      end
      if @api_client.config.client_side_validation && campaign_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'campaign_id' when calling DefaultApi.api_campaigns_campaign_id_events_contact_contact_id_get, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling DefaultApi.api_campaigns_campaign_id_events_contact_contact_id_get"
      end
      if @api_client.config.client_side_validation && contact_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'contact_id' when calling DefaultApi.api_campaigns_campaign_id_events_contact_contact_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/campaigns/{campaignId}/events/contact/{contactId}'.sub('{' + 'campaignId' + '}', campaign_id.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_campaign_id_events_contact_contact_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param campaign_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_clone_campaign_id_post(campaign_id, opts = {})
      api_campaigns_clone_campaign_id_post_with_http_info(campaign_id, opts)
      nil
    end

    # @param campaign_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_clone_campaign_id_post_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_clone_campaign_id_post ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling DefaultApi.api_campaigns_clone_campaign_id_post"
      end
      if @api_client.config.client_side_validation && campaign_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'campaign_id' when calling DefaultApi.api_campaigns_clone_campaign_id_post, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/campaigns/clone/{campaignId}'.sub('{' + 'campaignId' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_clone_campaign_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_events_batch_edit_put(opts = {})
      api_campaigns_events_batch_edit_put_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_events_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_events_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/campaigns/events/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_events_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of events.
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_events_contact_contact_id_get(contact_id, opts = {})
      api_campaigns_events_contact_contact_id_get_with_http_info(contact_id, opts)
      nil
    end

    # Get a list of events.
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_events_contact_contact_id_get_with_http_info(contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_events_contact_contact_id_get ...'
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling DefaultApi.api_campaigns_events_contact_contact_id_get"
      end
      if @api_client.config.client_side_validation && contact_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'contact_id' when calling DefaultApi.api_campaigns_events_contact_contact_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/campaigns/events/contact/{contactId}'.sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_events_contact_contact_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param event_id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_events_event_id_contact_contact_id_edit_put(event_id, contact_id, opts = {})
      api_campaigns_events_event_id_contact_contact_id_edit_put_with_http_info(event_id, contact_id, opts)
      nil
    end

    # @param event_id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_events_event_id_contact_contact_id_edit_put_with_http_info(event_id, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_events_event_id_contact_contact_id_edit_put ...'
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling DefaultApi.api_campaigns_events_event_id_contact_contact_id_edit_put"
      end
      if @api_client.config.client_side_validation && event_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'event_id' when calling DefaultApi.api_campaigns_events_event_id_contact_contact_id_edit_put, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling DefaultApi.api_campaigns_events_event_id_contact_contact_id_edit_put"
      end
      if @api_client.config.client_side_validation && contact_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'contact_id' when calling DefaultApi.api_campaigns_events_event_id_contact_contact_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/campaigns/events/{eventId}/contact/{contactId}/edit'.sub('{' + 'eventId' + '}', event_id.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_events_event_id_contact_contact_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_events_get(opts = {})
      api_campaigns_events_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_events_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_events_get ...'
      end
      # resource path
      local_var_path = '/api/campaigns/events'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_events_id_get(id, opts = {})
      api_campaigns_events_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_events_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_events_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_campaigns_events_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_campaigns_events_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/campaigns/events/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_events_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_get(opts = {})
      api_campaigns_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_get ...'
      end
      # resource path
      local_var_path = '/api/campaigns'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a lead to a campaign.
    # @param id 
    # @param lead_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_id_contact_lead_id_add_post(id, lead_id, opts = {})
      api_campaigns_id_contact_lead_id_add_post_with_http_info(id, lead_id, opts)
      nil
    end

    # Adds a lead to a campaign.
    # @param id 
    # @param lead_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_id_contact_lead_id_add_post_with_http_info(id, lead_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_id_contact_lead_id_add_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_campaigns_id_contact_lead_id_add_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_campaigns_id_contact_lead_id_add_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'lead_id' is set
      if @api_client.config.client_side_validation && lead_id.nil?
        fail ArgumentError, "Missing the required parameter 'lead_id' when calling DefaultApi.api_campaigns_id_contact_lead_id_add_post"
      end
      # resource path
      local_var_path = '/api/campaigns/{id}/contact/{leadId}/add'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'leadId' + '}', lead_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_id_contact_lead_id_add_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Removes given lead from a campaign.
    # @param id 
    # @param lead_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_id_contact_lead_id_remove_post(id, lead_id, opts = {})
      api_campaigns_id_contact_lead_id_remove_post_with_http_info(id, lead_id, opts)
      nil
    end

    # Removes given lead from a campaign.
    # @param id 
    # @param lead_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_id_contact_lead_id_remove_post_with_http_info(id, lead_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_id_contact_lead_id_remove_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_campaigns_id_contact_lead_id_remove_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_campaigns_id_contact_lead_id_remove_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'lead_id' is set
      if @api_client.config.client_side_validation && lead_id.nil?
        fail ArgumentError, "Missing the required parameter 'lead_id' when calling DefaultApi.api_campaigns_id_contact_lead_id_remove_post"
      end
      # resource path
      local_var_path = '/api/campaigns/{id}/contact/{leadId}/remove'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'leadId' + '}', lead_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_id_contact_lead_id_remove_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of campaign contacts.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_id_contacts_get(id, opts = {})
      api_campaigns_id_contacts_get_with_http_info(id, opts)
      nil
    end

    # Obtains a list of campaign contacts.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_id_contacts_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_id_contacts_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_campaigns_id_contacts_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_campaigns_id_contacts_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/campaigns/{id}/contacts'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_id_contacts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_id_delete_delete(id, opts = {})
      api_campaigns_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_campaigns_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_campaigns_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/campaigns/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_id_edit_patch(id, opts = {})
      api_campaigns_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_campaigns_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_campaigns_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/campaigns/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_id_edit_put(id, opts = {})
      api_campaigns_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_campaigns_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_campaigns_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/campaigns/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_id_get(id, opts = {})
      api_campaigns_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_campaigns_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_campaigns_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/campaigns/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_campaigns_new_post(opts = {})
      api_campaigns_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_campaigns_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_campaigns_new_post ...'
      end
      # resource path
      local_var_path = '/api/campaigns/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_campaigns_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_categories_batch_delete_delete(opts = {})
      api_categories_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_categories_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_categories_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/categories/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_categories_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_categories_batch_edit_patch(opts = {})
      api_categories_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_categories_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_categories_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/categories/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_categories_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_categories_batch_edit_put(opts = {})
      api_categories_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_categories_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_categories_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/categories/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_categories_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_categories_batch_new_post(opts = {})
      api_categories_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_categories_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_categories_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/categories/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_categories_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_categories_get(opts = {})
      api_categories_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_categories_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_categories_get ...'
      end
      # resource path
      local_var_path = '/api/categories'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_categories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_categories_id_delete_delete(id, opts = {})
      api_categories_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_categories_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_categories_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_categories_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_categories_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/categories/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_categories_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_categories_id_edit_patch(id, opts = {})
      api_categories_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_categories_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_categories_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_categories_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_categories_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/categories/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_categories_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_categories_id_edit_put(id, opts = {})
      api_categories_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_categories_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_categories_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_categories_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_categories_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/categories/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_categories_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_categories_id_get(id, opts = {})
      api_categories_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_categories_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_categories_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_categories_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_categories_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/categories/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_categories_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_categories_new_post(opts = {})
      api_categories_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_categories_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_categories_new_post ...'
      end
      # resource path
      local_var_path = '/api/categories/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_categories_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_companies_batch_delete_delete(opts = {})
      api_companies_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_companies_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_companies_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/companies/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_companies_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_companies_batch_edit_patch(opts = {})
      api_companies_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_companies_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_companies_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/companies/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_companies_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_companies_batch_edit_put(opts = {})
      api_companies_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_companies_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_companies_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/companies/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_companies_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_companies_batch_new_post(opts = {})
      api_companies_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_companies_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_companies_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/companies/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_companies_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a contact to a company.
    # @param company_id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_companies_company_id_contact_contact_id_add_post(company_id, contact_id, opts = {})
      api_companies_company_id_contact_contact_id_add_post_with_http_info(company_id, contact_id, opts)
      nil
    end

    # Adds a contact to a company.
    # @param company_id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_companies_company_id_contact_contact_id_add_post_with_http_info(company_id, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_companies_company_id_contact_contact_id_add_post ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling DefaultApi.api_companies_company_id_contact_contact_id_add_post"
      end
      if @api_client.config.client_side_validation && company_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'company_id' when calling DefaultApi.api_companies_company_id_contact_contact_id_add_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling DefaultApi.api_companies_company_id_contact_contact_id_add_post"
      end
      if @api_client.config.client_side_validation && contact_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'contact_id' when calling DefaultApi.api_companies_company_id_contact_contact_id_add_post, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/companies/{companyId}/contact/{contactId}/add'.sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_companies_company_id_contact_contact_id_add_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Removes given contact from a company.
    # @param company_id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_companies_company_id_contact_contact_id_remove_post(company_id, contact_id, opts = {})
      api_companies_company_id_contact_contact_id_remove_post_with_http_info(company_id, contact_id, opts)
      nil
    end

    # Removes given contact from a company.
    # @param company_id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_companies_company_id_contact_contact_id_remove_post_with_http_info(company_id, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_companies_company_id_contact_contact_id_remove_post ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling DefaultApi.api_companies_company_id_contact_contact_id_remove_post"
      end
      if @api_client.config.client_side_validation && company_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'company_id' when calling DefaultApi.api_companies_company_id_contact_contact_id_remove_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling DefaultApi.api_companies_company_id_contact_contact_id_remove_post"
      end
      if @api_client.config.client_side_validation && contact_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'contact_id' when calling DefaultApi.api_companies_company_id_contact_contact_id_remove_post, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/companies/{companyId}/contact/{contactId}/remove'.sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_companies_company_id_contact_contact_id_remove_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_companies_get(opts = {})
      api_companies_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_companies_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_companies_get ...'
      end
      # resource path
      local_var_path = '/api/companies'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_companies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_companies_id_delete_delete(id, opts = {})
      api_companies_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_companies_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_companies_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_companies_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_companies_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/companies/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_companies_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_companies_id_edit_patch(id, opts = {})
      api_companies_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_companies_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_companies_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_companies_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_companies_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/companies/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_companies_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_companies_id_edit_put(id, opts = {})
      api_companies_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_companies_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_companies_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_companies_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_companies_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/companies/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_companies_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_companies_id_get(id, opts = {})
      api_companies_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_companies_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_companies_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_companies_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_companies_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/companies/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_companies_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # If an existing company is matched, it'll be merged. Otherwise it'll be created.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_companies_new_post(opts = {})
      api_companies_new_post_with_http_info(opts)
      nil
    end

    # If an existing company is matched, it&#39;ll be merged. Otherwise it&#39;ll be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_companies_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_companies_new_post ...'
      end
      # resource path
      local_var_path = '/api/companies/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_companies_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of contact events.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_activity_get(opts = {})
      api_contacts_activity_get_with_http_info(opts)
      nil
    end

    # Obtains a list of contact events.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_activity_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_activity_get ...'
      end
      # resource path
      local_var_path = '/api/contacts/activity'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_activity_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_batch_delete_delete(opts = {})
      api_contacts_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/contacts/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_batch_edit_patch(opts = {})
      api_contacts_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/contacts/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_batch_edit_put(opts = {})
      api_contacts_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/contacts/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_batch_new_post(opts = {})
      api_contacts_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/contacts/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_get(opts = {})
      api_contacts_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_get ...'
      end
      # resource path
      local_var_path = '/api/contacts'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of contact events.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_activity_get(id, opts = {})
      api_contacts_id_activity_get_with_http_info(id, opts)
      nil
    end

    # Obtains a list of contact events.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_activity_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_activity_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_activity_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_activity_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/contacts/{id}/activity'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_activity_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of campaigns the lead is part of.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_campaigns_get(id, opts = {})
      api_contacts_id_campaigns_get_with_http_info(id, opts)
      nil
    end

    # Obtains a list of campaigns the lead is part of.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_campaigns_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_campaigns_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_campaigns_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_campaigns_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/contacts/{id}/campaigns'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_campaigns_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of contact companies the contact is in.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_companies_get(id, opts = {})
      api_contacts_id_companies_get_with_http_info(id, opts)
      nil
    end

    # Obtains a list of contact companies the contact is in.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_companies_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_companies_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_companies_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_companies_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/contacts/{id}/companies'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_companies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_delete_delete(id, opts = {})
      api_contacts_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/contacts/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of devices on a specific lead.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_devices_get(id, opts = {})
      api_contacts_id_devices_get_with_http_info(id, opts)
      nil
    end

    # Obtains a list of devices on a specific lead.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_devices_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_devices_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_devices_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_devices_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/contacts/{id}/devices'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_devices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a DNC to the contact.
    # @param id 
    # @param channel 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_dnc_channel_add_post(id, channel, opts = {})
      api_contacts_id_dnc_channel_add_post_with_http_info(id, channel, opts)
      nil
    end

    # Adds a DNC to the contact.
    # @param id 
    # @param channel 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_dnc_channel_add_post_with_http_info(id, channel, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_dnc_channel_add_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_dnc_channel_add_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_dnc_channel_add_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling DefaultApi.api_contacts_id_dnc_channel_add_post"
      end
      # resource path
      local_var_path = '/api/contacts/{id}/dnc/{channel}/add'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'channel' + '}', channel.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_dnc_channel_add_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Removes a DNC from the contact.
    # @param id 
    # @param channel 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_dnc_channel_remove_post(id, channel, opts = {})
      api_contacts_id_dnc_channel_remove_post_with_http_info(id, channel, opts)
      nil
    end

    # Removes a DNC from the contact.
    # @param id 
    # @param channel 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_dnc_channel_remove_post_with_http_info(id, channel, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_dnc_channel_remove_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_dnc_channel_remove_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_dnc_channel_remove_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling DefaultApi.api_contacts_id_dnc_channel_remove_post"
      end
      # resource path
      local_var_path = '/api/contacts/{id}/dnc/{channel}/remove'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'channel' + '}', channel.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_dnc_channel_remove_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_edit_patch(id, opts = {})
      api_contacts_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/contacts/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_edit_put(id, opts = {})
      api_contacts_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/contacts/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_get(id, opts = {})
      api_contacts_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/contacts/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of notes on a specific lead.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_notes_get(id, opts = {})
      api_contacts_id_notes_get_with_http_info(id, opts)
      nil
    end

    # Obtains a list of notes on a specific lead.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_notes_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_notes_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_notes_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_notes_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/contacts/{id}/notes'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_notes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of contact segments the contact is in.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_segments_get(id, opts = {})
      api_contacts_id_segments_get_with_http_info(id, opts)
      nil
    end

    # Obtains a list of contact segments the contact is in.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_segments_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_segments_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_segments_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_segments_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/contacts/{id}/segments'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_segments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a UTM Tagset to the contact.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_utm_add_post(id, opts = {})
      api_contacts_id_utm_add_post_with_http_info(id, opts)
      nil
    end

    # Adds a UTM Tagset to the contact.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_utm_add_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_utm_add_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_utm_add_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_utm_add_post, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/contacts/{id}/utm/add'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_utm_add_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove a UTM Tagset for the contact.
    # @param id 
    # @param utmid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_id_utm_utmid_remove_post(id, utmid, opts = {})
      api_contacts_id_utm_utmid_remove_post_with_http_info(id, utmid, opts)
      nil
    end

    # Remove a UTM Tagset for the contact.
    # @param id 
    # @param utmid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_id_utm_utmid_remove_post_with_http_info(id, utmid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_id_utm_utmid_remove_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_contacts_id_utm_utmid_remove_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_contacts_id_utm_utmid_remove_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'utmid' is set
      if @api_client.config.client_side_validation && utmid.nil?
        fail ArgumentError, "Missing the required parameter 'utmid' when calling DefaultApi.api_contacts_id_utm_utmid_remove_post"
      end
      # resource path
      local_var_path = '/api/contacts/{id}/utm/{utmid}/remove'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'utmid' + '}', utmid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_id_utm_utmid_remove_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Subtract points from a lead.
    # @param lead_id 
    # @param operator 
    # @param delta 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_lead_id_points_operator_delta_post(lead_id, operator, delta, opts = {})
      api_contacts_lead_id_points_operator_delta_post_with_http_info(lead_id, operator, delta, opts)
      nil
    end

    # Subtract points from a lead.
    # @param lead_id 
    # @param operator 
    # @param delta 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_lead_id_points_operator_delta_post_with_http_info(lead_id, operator, delta, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_lead_id_points_operator_delta_post ...'
      end
      # verify the required parameter 'lead_id' is set
      if @api_client.config.client_side_validation && lead_id.nil?
        fail ArgumentError, "Missing the required parameter 'lead_id' when calling DefaultApi.api_contacts_lead_id_points_operator_delta_post"
      end
      if @api_client.config.client_side_validation && lead_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'lead_id' when calling DefaultApi.api_contacts_lead_id_points_operator_delta_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'operator' is set
      if @api_client.config.client_side_validation && operator.nil?
        fail ArgumentError, "Missing the required parameter 'operator' when calling DefaultApi.api_contacts_lead_id_points_operator_delta_post"
      end
      # verify the required parameter 'delta' is set
      if @api_client.config.client_side_validation && delta.nil?
        fail ArgumentError, "Missing the required parameter 'delta' when calling DefaultApi.api_contacts_lead_id_points_operator_delta_post"
      end
      # resource path
      local_var_path = '/api/contacts/{leadId}/points/{operator}/{delta}'.sub('{' + 'leadId' + '}', lead_id.to_s).sub('{' + 'operator' + '}', operator.to_s).sub('{' + 'delta' + '}', delta.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_lead_id_points_operator_delta_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of custom fields.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_list_fields_get(opts = {})
      api_contacts_list_fields_get_with_http_info(opts)
      nil
    end

    # Obtains a list of custom fields.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_list_fields_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_list_fields_get ...'
      end
      # resource path
      local_var_path = '/api/contacts/list/fields'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_list_fields_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of users for lead owner edits.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_list_owners_get(opts = {})
      api_contacts_list_owners_get_with_http_info(opts)
      nil
    end

    # Obtains a list of users for lead owner edits.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_list_owners_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_list_owners_get ...'
      end
      # resource path
      local_var_path = '/api/contacts/list/owners'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_list_owners_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of smart lists for the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_list_segments_get(opts = {})
      api_contacts_list_segments_get_with_http_info(opts)
      nil
    end

    # Obtains a list of smart lists for the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_list_segments_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_list_segments_get ...'
      end
      # resource path
      local_var_path = '/api/contacts/list/segments'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_list_segments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_contacts_new_post(opts = {})
      api_contacts_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_contacts_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_contacts_new_post ...'
      end
      # resource path
      local_var_path = '/api/contacts/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_contacts_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of available widget types.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_data_get(opts = {})
      api_data_get_with_http_info(opts)
      nil
    end

    # Obtains a list of available widget types.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_data_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_data_get ...'
      end
      # resource path
      local_var_path = '/api/data'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_data_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of available widget types.
    # @param type 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_data_type_get(type, opts = {})
      api_data_type_get_with_http_info(type, opts)
      nil
    end

    # Obtains a list of available widget types.
    # @param type 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_data_type_get_with_http_info(type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_data_type_get ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DefaultApi.api_data_type_get"
      end
      # resource path
      local_var_path = '/api/data/{type}'.sub('{' + 'type' + '}', type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_data_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_devices_batch_delete_delete(opts = {})
      api_devices_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_devices_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_devices_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/devices/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_devices_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_devices_batch_edit_patch(opts = {})
      api_devices_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_devices_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_devices_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/devices/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_devices_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_devices_batch_edit_put(opts = {})
      api_devices_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_devices_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_devices_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/devices/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_devices_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_devices_batch_new_post(opts = {})
      api_devices_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_devices_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_devices_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/devices/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_devices_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_devices_get(opts = {})
      api_devices_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_devices_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_devices_get ...'
      end
      # resource path
      local_var_path = '/api/devices'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_devices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_devices_id_delete_delete(id, opts = {})
      api_devices_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_devices_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_devices_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_devices_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_devices_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/devices/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_devices_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_devices_id_edit_patch(id, opts = {})
      api_devices_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_devices_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_devices_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_devices_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_devices_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/devices/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_devices_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_devices_id_edit_put(id, opts = {})
      api_devices_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_devices_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_devices_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_devices_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_devices_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/devices/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_devices_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_devices_id_get(id, opts = {})
      api_devices_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_devices_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_devices_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_devices_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_devices_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/devices/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_devices_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_devices_new_post(opts = {})
      api_devices_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_devices_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_devices_new_post ...'
      end
      # resource path
      local_var_path = '/api/devices/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_devices_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_dynamiccontents_batch_delete_delete(opts = {})
      api_dynamiccontents_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_dynamiccontents_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_dynamiccontents_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/dynamiccontents/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_dynamiccontents_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_dynamiccontents_batch_edit_patch(opts = {})
      api_dynamiccontents_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_dynamiccontents_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_dynamiccontents_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/dynamiccontents/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_dynamiccontents_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_dynamiccontents_batch_edit_put(opts = {})
      api_dynamiccontents_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_dynamiccontents_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_dynamiccontents_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/dynamiccontents/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_dynamiccontents_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_dynamiccontents_batch_new_post(opts = {})
      api_dynamiccontents_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_dynamiccontents_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_dynamiccontents_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/dynamiccontents/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_dynamiccontents_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_dynamiccontents_get(opts = {})
      api_dynamiccontents_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_dynamiccontents_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_dynamiccontents_get ...'
      end
      # resource path
      local_var_path = '/api/dynamiccontents'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_dynamiccontents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_dynamiccontents_id_delete_delete(id, opts = {})
      api_dynamiccontents_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_dynamiccontents_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_dynamiccontents_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_dynamiccontents_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_dynamiccontents_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/dynamiccontents/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_dynamiccontents_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_dynamiccontents_id_edit_patch(id, opts = {})
      api_dynamiccontents_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_dynamiccontents_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_dynamiccontents_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_dynamiccontents_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_dynamiccontents_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/dynamiccontents/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_dynamiccontents_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_dynamiccontents_id_edit_put(id, opts = {})
      api_dynamiccontents_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_dynamiccontents_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_dynamiccontents_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_dynamiccontents_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_dynamiccontents_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/dynamiccontents/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_dynamiccontents_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_dynamiccontents_id_get(id, opts = {})
      api_dynamiccontents_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_dynamiccontents_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_dynamiccontents_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_dynamiccontents_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_dynamiccontents_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/dynamiccontents/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_dynamiccontents_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_dynamiccontents_new_post(opts = {})
      api_dynamiccontents_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_dynamiccontents_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_dynamiccontents_new_post ...'
      end
      # resource path
      local_var_path = '/api/dynamiccontents/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_dynamiccontents_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_emails_batch_delete_delete(opts = {})
      api_emails_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_emails_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_emails_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/emails/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_emails_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_emails_batch_edit_patch(opts = {})
      api_emails_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_emails_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_emails_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/emails/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_emails_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_emails_batch_edit_put(opts = {})
      api_emails_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_emails_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_emails_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/emails/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_emails_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_emails_batch_new_post(opts = {})
      api_emails_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_emails_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_emails_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/emails/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_emails_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of emails.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_emails_get(opts = {})
      api_emails_get_with_http_info(opts)
      nil
    end

    # Obtains a list of emails.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_emails_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_emails_get ...'
      end
      # resource path
      local_var_path = '/api/emails'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_emails_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sends the email to a specific lead.
    # @param id 
    # @param lead_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_emails_id_contact_lead_id_send_post(id, lead_id, opts = {})
      api_emails_id_contact_lead_id_send_post_with_http_info(id, lead_id, opts)
      nil
    end

    # Sends the email to a specific lead.
    # @param id 
    # @param lead_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_emails_id_contact_lead_id_send_post_with_http_info(id, lead_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_emails_id_contact_lead_id_send_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_emails_id_contact_lead_id_send_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_emails_id_contact_lead_id_send_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'lead_id' is set
      if @api_client.config.client_side_validation && lead_id.nil?
        fail ArgumentError, "Missing the required parameter 'lead_id' when calling DefaultApi.api_emails_id_contact_lead_id_send_post"
      end
      # resource path
      local_var_path = '/api/emails/{id}/contact/{leadId}/send'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'leadId' + '}', lead_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_emails_id_contact_lead_id_send_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_emails_id_delete_delete(id, opts = {})
      api_emails_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_emails_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_emails_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_emails_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_emails_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/emails/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_emails_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_emails_id_edit_patch(id, opts = {})
      api_emails_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_emails_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_emails_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_emails_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_emails_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/emails/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_emails_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_emails_id_edit_put(id, opts = {})
      api_emails_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_emails_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_emails_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_emails_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_emails_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/emails/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_emails_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_emails_id_get(id, opts = {})
      api_emails_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_emails_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_emails_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_emails_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_emails_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/emails/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_emails_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sends the email to it's assigned lists.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_emails_id_send_post(id, opts = {})
      api_emails_id_send_post_with_http_info(id, opts)
      nil
    end

    # Sends the email to it&#39;s assigned lists.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_emails_id_send_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_emails_id_send_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_emails_id_send_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_emails_id_send_post, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/emails/{id}/send'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_emails_id_send_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_emails_new_post(opts = {})
      api_emails_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_emails_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_emails_new_post ...'
      end
      # resource path
      local_var_path = '/api/emails/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_emails_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param object 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_fields_object_batch_delete_delete(object, opts = {})
      api_fields_object_batch_delete_delete_with_http_info(object, opts)
      nil
    end

    # Delete a batch of entities.
    # @param object 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_fields_object_batch_delete_delete_with_http_info(object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_fields_object_batch_delete_delete ...'
      end
      # verify the required parameter 'object' is set
      if @api_client.config.client_side_validation && object.nil?
        fail ArgumentError, "Missing the required parameter 'object' when calling DefaultApi.api_fields_object_batch_delete_delete"
      end
      # resource path
      local_var_path = '/api/fields/{object}/batch/delete'.sub('{' + 'object' + '}', object.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_fields_object_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param object 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_fields_object_batch_edit_patch(object, opts = {})
      api_fields_object_batch_edit_patch_with_http_info(object, opts)
      nil
    end

    # Edit a batch of entities.
    # @param object 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_fields_object_batch_edit_patch_with_http_info(object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_fields_object_batch_edit_patch ...'
      end
      # verify the required parameter 'object' is set
      if @api_client.config.client_side_validation && object.nil?
        fail ArgumentError, "Missing the required parameter 'object' when calling DefaultApi.api_fields_object_batch_edit_patch"
      end
      # resource path
      local_var_path = '/api/fields/{object}/batch/edit'.sub('{' + 'object' + '}', object.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_fields_object_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param object 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_fields_object_batch_edit_put(object, opts = {})
      api_fields_object_batch_edit_put_with_http_info(object, opts)
      nil
    end

    # Edit a batch of entities.
    # @param object 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_fields_object_batch_edit_put_with_http_info(object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_fields_object_batch_edit_put ...'
      end
      # verify the required parameter 'object' is set
      if @api_client.config.client_side_validation && object.nil?
        fail ArgumentError, "Missing the required parameter 'object' when calling DefaultApi.api_fields_object_batch_edit_put"
      end
      # resource path
      local_var_path = '/api/fields/{object}/batch/edit'.sub('{' + 'object' + '}', object.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_fields_object_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param object 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_fields_object_batch_new_post(object, opts = {})
      api_fields_object_batch_new_post_with_http_info(object, opts)
      nil
    end

    # Create a batch of new entities.
    # @param object 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_fields_object_batch_new_post_with_http_info(object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_fields_object_batch_new_post ...'
      end
      # verify the required parameter 'object' is set
      if @api_client.config.client_side_validation && object.nil?
        fail ArgumentError, "Missing the required parameter 'object' when calling DefaultApi.api_fields_object_batch_new_post"
      end
      # resource path
      local_var_path = '/api/fields/{object}/batch/new'.sub('{' + 'object' + '}', object.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_fields_object_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param object 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_fields_object_get(object, opts = {})
      api_fields_object_get_with_http_info(object, opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param object 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_fields_object_get_with_http_info(object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_fields_object_get ...'
      end
      # verify the required parameter 'object' is set
      if @api_client.config.client_side_validation && object.nil?
        fail ArgumentError, "Missing the required parameter 'object' when calling DefaultApi.api_fields_object_get"
      end
      # resource path
      local_var_path = '/api/fields/{object}'.sub('{' + 'object' + '}', object.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_fields_object_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_fields_object_id_delete_delete(object, id, opts = {})
      api_fields_object_id_delete_delete_with_http_info(object, id, opts)
      nil
    end

    # Deletes an entity.
    # @param object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_fields_object_id_delete_delete_with_http_info(object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_fields_object_id_delete_delete ...'
      end
      # verify the required parameter 'object' is set
      if @api_client.config.client_side_validation && object.nil?
        fail ArgumentError, "Missing the required parameter 'object' when calling DefaultApi.api_fields_object_id_delete_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_fields_object_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_fields_object_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/fields/{object}/{id}/delete'.sub('{' + 'object' + '}', object.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_fields_object_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_fields_object_id_edit_patch(object, id, opts = {})
      api_fields_object_id_edit_patch_with_http_info(object, id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_fields_object_id_edit_patch_with_http_info(object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_fields_object_id_edit_patch ...'
      end
      # verify the required parameter 'object' is set
      if @api_client.config.client_side_validation && object.nil?
        fail ArgumentError, "Missing the required parameter 'object' when calling DefaultApi.api_fields_object_id_edit_patch"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_fields_object_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_fields_object_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/fields/{object}/{id}/edit'.sub('{' + 'object' + '}', object.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_fields_object_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_fields_object_id_edit_put(object, id, opts = {})
      api_fields_object_id_edit_put_with_http_info(object, id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_fields_object_id_edit_put_with_http_info(object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_fields_object_id_edit_put ...'
      end
      # verify the required parameter 'object' is set
      if @api_client.config.client_side_validation && object.nil?
        fail ArgumentError, "Missing the required parameter 'object' when calling DefaultApi.api_fields_object_id_edit_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_fields_object_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_fields_object_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/fields/{object}/{id}/edit'.sub('{' + 'object' + '}', object.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_fields_object_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_fields_object_id_get(object, id, opts = {})
      api_fields_object_id_get_with_http_info(object, id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param object 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_fields_object_id_get_with_http_info(object, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_fields_object_id_get ...'
      end
      # verify the required parameter 'object' is set
      if @api_client.config.client_side_validation && object.nil?
        fail ArgumentError, "Missing the required parameter 'object' when calling DefaultApi.api_fields_object_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_fields_object_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_fields_object_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/fields/{object}/{id}'.sub('{' + 'object' + '}', object.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_fields_object_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param object 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_fields_object_new_post(object, opts = {})
      api_fields_object_new_post_with_http_info(object, opts)
      nil
    end

    # Creates a new entity.
    # @param object 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_fields_object_new_post_with_http_info(object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_fields_object_new_post ...'
      end
      # verify the required parameter 'object' is set
      if @api_client.config.client_side_validation && object.nil?
        fail ArgumentError, "Missing the required parameter 'object' when calling DefaultApi.api_fields_object_new_post"
      end
      # resource path
      local_var_path = '/api/fields/{object}/new'.sub('{' + 'object' + '}', object.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_fields_object_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a file from /media directory.
    # @param dir 
    # @param file 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_files_dir_file_delete_delete(dir, file, opts = {})
      api_files_dir_file_delete_delete_with_http_info(dir, file, opts)
      nil
    end

    # Delete a file from /media directory.
    # @param dir 
    # @param file 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_files_dir_file_delete_delete_with_http_info(dir, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_files_dir_file_delete_delete ...'
      end
      # verify the required parameter 'dir' is set
      if @api_client.config.client_side_validation && dir.nil?
        fail ArgumentError, "Missing the required parameter 'dir' when calling DefaultApi.api_files_dir_file_delete_delete"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling DefaultApi.api_files_dir_file_delete_delete"
      end
      # resource path
      local_var_path = '/api/files/{dir}/{file}/delete'.sub('{' + 'dir' + '}', dir.to_s).sub('{' + 'file' + '}', file.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_files_dir_file_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List the files in /media directory.
    # @param dir 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_files_dir_get(dir, opts = {})
      api_files_dir_get_with_http_info(dir, opts)
      nil
    end

    # List the files in /media directory.
    # @param dir 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_files_dir_get_with_http_info(dir, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_files_dir_get ...'
      end
      # verify the required parameter 'dir' is set
      if @api_client.config.client_side_validation && dir.nil?
        fail ArgumentError, "Missing the required parameter 'dir' when calling DefaultApi.api_files_dir_get"
      end
      # resource path
      local_var_path = '/api/files/{dir}'.sub('{' + 'dir' + '}', dir.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_files_dir_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Uploads a file.
    # @param dir 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_files_dir_new_post(dir, opts = {})
      api_files_dir_new_post_with_http_info(dir, opts)
      nil
    end

    # Uploads a file.
    # @param dir 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_files_dir_new_post_with_http_info(dir, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_files_dir_new_post ...'
      end
      # verify the required parameter 'dir' is set
      if @api_client.config.client_side_validation && dir.nil?
        fail ArgumentError, "Missing the required parameter 'dir' when calling DefaultApi.api_files_dir_new_post"
      end
      # resource path
      local_var_path = '/api/files/{dir}/new'.sub('{' + 'dir' + '}', dir.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_files_dir_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_focus_batch_delete_delete(opts = {})
      api_focus_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_focus_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_focus_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/focus/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_focus_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_focus_batch_edit_patch(opts = {})
      api_focus_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_focus_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_focus_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/focus/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_focus_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_focus_batch_edit_put(opts = {})
      api_focus_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_focus_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_focus_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/focus/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_focus_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_focus_batch_new_post(opts = {})
      api_focus_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_focus_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_focus_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/focus/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_focus_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_focus_get(opts = {})
      api_focus_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_focus_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_focus_get ...'
      end
      # resource path
      local_var_path = '/api/focus'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_focus_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_focus_id_delete_delete(id, opts = {})
      api_focus_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_focus_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_focus_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_focus_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_focus_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/focus/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_focus_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_focus_id_edit_patch(id, opts = {})
      api_focus_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_focus_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_focus_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_focus_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_focus_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/focus/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_focus_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_focus_id_edit_put(id, opts = {})
      api_focus_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_focus_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_focus_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_focus_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_focus_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/focus/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_focus_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_focus_id_get(id, opts = {})
      api_focus_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_focus_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_focus_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_focus_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_focus_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/focus/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_focus_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_focus_id_js_post(id, opts = {})
      api_focus_id_js_post_with_http_info(id, opts)
      nil
    end

    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_focus_id_js_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_focus_id_js_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_focus_id_js_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_focus_id_js_post, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/focus/{id}/js'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_focus_id_js_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_focus_new_post(opts = {})
      api_focus_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_focus_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_focus_new_post ...'
      end
      # resource path
      local_var_path = '/api/focus/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_focus_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_batch_delete_delete(opts = {})
      api_forms_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/forms/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_batch_edit_patch(opts = {})
      api_forms_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/forms/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_batch_edit_put(opts = {})
      api_forms_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/forms/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_batch_new_post(opts = {})
      api_forms_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/forms/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete fields from a form.
    # @param form_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_form_id_actions_delete_delete(form_id, opts = {})
      api_forms_form_id_actions_delete_delete_with_http_info(form_id, opts)
      nil
    end

    # Delete fields from a form.
    # @param form_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_form_id_actions_delete_delete_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_form_id_actions_delete_delete ...'
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling DefaultApi.api_forms_form_id_actions_delete_delete"
      end
      if @api_client.config.client_side_validation && form_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'form_id' when calling DefaultApi.api_forms_form_id_actions_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/forms/{formId}/actions/delete'.sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_form_id_actions_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete fields from a form.
    # @param form_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_form_id_fields_delete_delete(form_id, opts = {})
      api_forms_form_id_fields_delete_delete_with_http_info(form_id, opts)
      nil
    end

    # Delete fields from a form.
    # @param form_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_form_id_fields_delete_delete_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_form_id_fields_delete_delete ...'
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling DefaultApi.api_forms_form_id_fields_delete_delete"
      end
      if @api_client.config.client_side_validation && form_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'form_id' when calling DefaultApi.api_forms_form_id_fields_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/forms/{formId}/fields/delete'.sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_form_id_fields_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities for specific form and contact.
    # @param form_id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_form_id_submissions_contact_contact_id_get(form_id, contact_id, opts = {})
      api_forms_form_id_submissions_contact_contact_id_get_with_http_info(form_id, contact_id, opts)
      nil
    end

    # Obtains a list of entities for specific form and contact.
    # @param form_id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_form_id_submissions_contact_contact_id_get_with_http_info(form_id, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_form_id_submissions_contact_contact_id_get ...'
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling DefaultApi.api_forms_form_id_submissions_contact_contact_id_get"
      end
      if @api_client.config.client_side_validation && form_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'form_id' when calling DefaultApi.api_forms_form_id_submissions_contact_contact_id_get, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling DefaultApi.api_forms_form_id_submissions_contact_contact_id_get"
      end
      if @api_client.config.client_side_validation && contact_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'contact_id' when calling DefaultApi.api_forms_form_id_submissions_contact_contact_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/forms/{formId}/submissions/contact/{contactId}'.sub('{' + 'formId' + '}', form_id.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_form_id_submissions_contact_contact_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param form_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_form_id_submissions_get(form_id, opts = {})
      api_forms_form_id_submissions_get_with_http_info(form_id, opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param form_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_form_id_submissions_get_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_form_id_submissions_get ...'
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling DefaultApi.api_forms_form_id_submissions_get"
      end
      if @api_client.config.client_side_validation && form_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'form_id' when calling DefaultApi.api_forms_form_id_submissions_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/forms/{formId}/submissions'.sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_form_id_submissions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param form_id 
    # @param submission_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_form_id_submissions_submission_id_get(form_id, submission_id, opts = {})
      api_forms_form_id_submissions_submission_id_get_with_http_info(form_id, submission_id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param form_id 
    # @param submission_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_form_id_submissions_submission_id_get_with_http_info(form_id, submission_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_form_id_submissions_submission_id_get ...'
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling DefaultApi.api_forms_form_id_submissions_submission_id_get"
      end
      if @api_client.config.client_side_validation && form_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'form_id' when calling DefaultApi.api_forms_form_id_submissions_submission_id_get, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'submission_id' is set
      if @api_client.config.client_side_validation && submission_id.nil?
        fail ArgumentError, "Missing the required parameter 'submission_id' when calling DefaultApi.api_forms_form_id_submissions_submission_id_get"
      end
      if @api_client.config.client_side_validation && submission_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'submission_id' when calling DefaultApi.api_forms_form_id_submissions_submission_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/forms/{formId}/submissions/{submissionId}'.sub('{' + 'formId' + '}', form_id.to_s).sub('{' + 'submissionId' + '}', submission_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_form_id_submissions_submission_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_get(opts = {})
      api_forms_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_get ...'
      end
      # resource path
      local_var_path = '/api/forms'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_id_delete_delete(id, opts = {})
      api_forms_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_forms_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_forms_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/forms/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_id_edit_patch(id, opts = {})
      api_forms_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_forms_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_forms_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/forms/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_id_edit_put(id, opts = {})
      api_forms_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_forms_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_forms_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/forms/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_id_get(id, opts = {})
      api_forms_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_forms_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_forms_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/forms/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_forms_new_post(opts = {})
      api_forms_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_forms_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_forms_new_post ...'
      end
      # resource path
      local_var_path = '/api/forms/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_forms_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_hooks_batch_delete_delete(opts = {})
      api_hooks_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_hooks_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_hooks_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/hooks/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_hooks_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_hooks_batch_edit_patch(opts = {})
      api_hooks_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_hooks_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_hooks_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/hooks/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_hooks_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_hooks_batch_edit_put(opts = {})
      api_hooks_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_hooks_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_hooks_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/hooks/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_hooks_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_hooks_batch_new_post(opts = {})
      api_hooks_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_hooks_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_hooks_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/hooks/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_hooks_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_hooks_get(opts = {})
      api_hooks_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_hooks_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_hooks_get ...'
      end
      # resource path
      local_var_path = '/api/hooks'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_hooks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_hooks_id_delete_delete(id, opts = {})
      api_hooks_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_hooks_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_hooks_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_hooks_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_hooks_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/hooks/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_hooks_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_hooks_id_edit_patch(id, opts = {})
      api_hooks_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_hooks_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_hooks_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_hooks_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_hooks_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/hooks/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_hooks_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_hooks_id_edit_put(id, opts = {})
      api_hooks_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_hooks_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_hooks_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_hooks_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_hooks_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/hooks/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_hooks_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_hooks_id_get(id, opts = {})
      api_hooks_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_hooks_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_hooks_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_hooks_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_hooks_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/hooks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_hooks_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_hooks_new_post(opts = {})
      api_hooks_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_hooks_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_hooks_new_post ...'
      end
      # resource path
      local_var_path = '/api/hooks/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_hooks_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_hooks_triggers_get(opts = {})
      api_hooks_triggers_get_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_hooks_triggers_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_hooks_triggers_get ...'
      end
      # resource path
      local_var_path = '/api/hooks/triggers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_hooks_triggers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_messages_batch_delete_delete(opts = {})
      api_messages_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_messages_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_messages_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/messages/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_messages_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_messages_batch_edit_patch(opts = {})
      api_messages_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_messages_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_messages_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/messages/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_messages_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_messages_batch_edit_put(opts = {})
      api_messages_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_messages_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_messages_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/messages/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_messages_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_messages_batch_new_post(opts = {})
      api_messages_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_messages_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_messages_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/messages/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_messages_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_messages_get(opts = {})
      api_messages_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_messages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_messages_get ...'
      end
      # resource path
      local_var_path = '/api/messages'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_messages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_messages_id_delete_delete(id, opts = {})
      api_messages_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_messages_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_messages_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_messages_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_messages_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/messages/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_messages_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_messages_id_edit_patch(id, opts = {})
      api_messages_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_messages_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_messages_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_messages_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_messages_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/messages/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_messages_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_messages_id_edit_put(id, opts = {})
      api_messages_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_messages_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_messages_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_messages_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_messages_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/messages/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_messages_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_messages_id_get(id, opts = {})
      api_messages_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_messages_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_messages_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_messages_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_messages_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/messages/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_messages_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_messages_new_post(opts = {})
      api_messages_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_messages_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_messages_new_post ...'
      end
      # resource path
      local_var_path = '/api/messages/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_messages_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notes_batch_delete_delete(opts = {})
      api_notes_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notes_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notes_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/notes/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notes_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notes_batch_edit_patch(opts = {})
      api_notes_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notes_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notes_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/notes/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notes_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notes_batch_edit_put(opts = {})
      api_notes_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notes_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notes_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/notes/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notes_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notes_batch_new_post(opts = {})
      api_notes_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notes_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notes_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/notes/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notes_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notes_get(opts = {})
      api_notes_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notes_get ...'
      end
      # resource path
      local_var_path = '/api/notes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notes_id_delete_delete(id, opts = {})
      api_notes_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notes_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notes_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_notes_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_notes_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/notes/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notes_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notes_id_edit_patch(id, opts = {})
      api_notes_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notes_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notes_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_notes_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_notes_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/notes/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notes_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notes_id_edit_put(id, opts = {})
      api_notes_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notes_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notes_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_notes_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_notes_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/notes/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notes_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notes_id_get(id, opts = {})
      api_notes_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notes_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notes_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_notes_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_notes_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/notes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notes_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notes_new_post(opts = {})
      api_notes_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notes_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notes_new_post ...'
      end
      # resource path
      local_var_path = '/api/notes/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notes_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notifications_batch_delete_delete(opts = {})
      api_notifications_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notifications_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notifications_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/notifications/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notifications_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notifications_batch_edit_patch(opts = {})
      api_notifications_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notifications_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notifications_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/notifications/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notifications_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notifications_batch_edit_put(opts = {})
      api_notifications_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notifications_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notifications_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/notifications/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notifications_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notifications_batch_new_post(opts = {})
      api_notifications_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notifications_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notifications_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/notifications/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notifications_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notifications_get(opts = {})
      api_notifications_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notifications_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notifications_get ...'
      end
      # resource path
      local_var_path = '/api/notifications'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notifications_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notifications_id_delete_delete(id, opts = {})
      api_notifications_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notifications_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notifications_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_notifications_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_notifications_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/notifications/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notifications_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notifications_id_edit_patch(id, opts = {})
      api_notifications_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notifications_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notifications_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_notifications_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_notifications_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/notifications/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notifications_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notifications_id_edit_put(id, opts = {})
      api_notifications_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notifications_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notifications_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_notifications_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_notifications_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/notifications/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notifications_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notifications_id_get(id, opts = {})
      api_notifications_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notifications_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notifications_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_notifications_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_notifications_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/notifications/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notifications_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_notifications_new_post(opts = {})
      api_notifications_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_notifications_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_notifications_new_post ...'
      end
      # resource path
      local_var_path = '/api/notifications/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_notifications_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_pages_batch_delete_delete(opts = {})
      api_pages_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_pages_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_pages_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/pages/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_pages_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_pages_batch_edit_patch(opts = {})
      api_pages_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_pages_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_pages_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/pages/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_pages_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_pages_batch_edit_put(opts = {})
      api_pages_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_pages_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_pages_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/pages/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_pages_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_pages_batch_new_post(opts = {})
      api_pages_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_pages_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_pages_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/pages/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_pages_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of pages.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_pages_get(opts = {})
      api_pages_get_with_http_info(opts)
      nil
    end

    # Obtains a list of pages.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_pages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_pages_get ...'
      end
      # resource path
      local_var_path = '/api/pages'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_pages_id_delete_delete(id, opts = {})
      api_pages_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_pages_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_pages_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_pages_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_pages_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/pages/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_pages_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_pages_id_edit_patch(id, opts = {})
      api_pages_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_pages_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_pages_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_pages_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_pages_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/pages/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_pages_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_pages_id_edit_put(id, opts = {})
      api_pages_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_pages_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_pages_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_pages_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_pages_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/pages/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_pages_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_pages_id_get(id, opts = {})
      api_pages_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_pages_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_pages_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_pages_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_pages_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/pages/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_pages_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_pages_new_post(opts = {})
      api_pages_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_pages_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_pages_new_post ...'
      end
      # resource path
      local_var_path = '/api/pages/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_pages_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return array of available point action types.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_actions_types_get(opts = {})
      api_points_actions_types_get_with_http_info(opts)
      nil
    end

    # Return array of available point action types.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_actions_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_actions_types_get ...'
      end
      # resource path
      local_var_path = '/api/points/actions/types'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_actions_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_batch_delete_delete(opts = {})
      api_points_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/points/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_batch_edit_patch(opts = {})
      api_points_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/points/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_batch_edit_put(opts = {})
      api_points_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/points/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_batch_new_post(opts = {})
      api_points_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/points/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_get(opts = {})
      api_points_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_get ...'
      end
      # resource path
      local_var_path = '/api/points'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_id_delete_delete(id, opts = {})
      api_points_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_points_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_points_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/points/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_id_edit_patch(id, opts = {})
      api_points_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_points_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_points_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/points/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_id_edit_put(id, opts = {})
      api_points_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_points_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_points_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/points/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_id_get(id, opts = {})
      api_points_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_points_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_points_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/points/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_new_post(opts = {})
      api_points_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_new_post ...'
      end
      # resource path
      local_var_path = '/api/points/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_triggers_batch_delete_delete(opts = {})
      api_points_triggers_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_triggers_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_triggers_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/points/triggers/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_triggers_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_triggers_batch_edit_patch(opts = {})
      api_points_triggers_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_triggers_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_triggers_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/points/triggers/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_triggers_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_triggers_batch_edit_put(opts = {})
      api_points_triggers_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_triggers_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_triggers_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/points/triggers/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_triggers_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_triggers_batch_new_post(opts = {})
      api_points_triggers_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_triggers_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_triggers_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/points/triggers/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_triggers_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return array of available point trigger event types.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_triggers_events_types_get(opts = {})
      api_points_triggers_events_types_get_with_http_info(opts)
      nil
    end

    # Return array of available point trigger event types.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_triggers_events_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_triggers_events_types_get ...'
      end
      # resource path
      local_var_path = '/api/points/triggers/events/types'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_triggers_events_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_triggers_get(opts = {})
      api_points_triggers_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_triggers_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_triggers_get ...'
      end
      # resource path
      local_var_path = '/api/points/triggers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_triggers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_triggers_id_delete_delete(id, opts = {})
      api_points_triggers_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_triggers_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_triggers_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_points_triggers_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_points_triggers_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/points/triggers/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_triggers_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_triggers_id_edit_patch(id, opts = {})
      api_points_triggers_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_triggers_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_triggers_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_points_triggers_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_points_triggers_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/points/triggers/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_triggers_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_triggers_id_edit_put(id, opts = {})
      api_points_triggers_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_triggers_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_triggers_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_points_triggers_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_points_triggers_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/points/triggers/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_triggers_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_triggers_id_get(id, opts = {})
      api_points_triggers_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_triggers_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_triggers_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_points_triggers_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_points_triggers_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/points/triggers/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_triggers_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_triggers_new_post(opts = {})
      api_points_triggers_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_triggers_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_triggers_new_post ...'
      end
      # resource path
      local_var_path = '/api/points/triggers/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_triggers_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete events from a point trigger.
    # @param trigger_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_points_triggers_trigger_id_events_delete_delete(trigger_id, opts = {})
      api_points_triggers_trigger_id_events_delete_delete_with_http_info(trigger_id, opts)
      nil
    end

    # Delete events from a point trigger.
    # @param trigger_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_points_triggers_trigger_id_events_delete_delete_with_http_info(trigger_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_points_triggers_trigger_id_events_delete_delete ...'
      end
      # verify the required parameter 'trigger_id' is set
      if @api_client.config.client_side_validation && trigger_id.nil?
        fail ArgumentError, "Missing the required parameter 'trigger_id' when calling DefaultApi.api_points_triggers_trigger_id_events_delete_delete"
      end
      if @api_client.config.client_side_validation && trigger_id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'trigger_id' when calling DefaultApi.api_points_triggers_trigger_id_events_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/points/triggers/{triggerId}/events/delete'.sub('{' + 'triggerId' + '}', trigger_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_points_triggers_trigger_id_events_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_reports_get(opts = {})
      api_reports_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_reports_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_reports_get ...'
      end
      # resource path
      local_var_path = '/api/reports'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_reports_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a compiled report.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_reports_id_get(id, opts = {})
      api_reports_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a compiled report.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_reports_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_reports_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_reports_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_reports_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/reports/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_reports_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_roles_batch_delete_delete(opts = {})
      api_roles_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_roles_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_roles_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/roles/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_roles_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_roles_batch_edit_patch(opts = {})
      api_roles_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_roles_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_roles_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/roles/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_roles_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_roles_batch_edit_put(opts = {})
      api_roles_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_roles_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_roles_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/roles/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_roles_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_roles_batch_new_post(opts = {})
      api_roles_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_roles_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_roles_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/roles/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_roles_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_roles_get(opts = {})
      api_roles_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_roles_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_roles_get ...'
      end
      # resource path
      local_var_path = '/api/roles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_roles_id_delete_delete(id, opts = {})
      api_roles_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_roles_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_roles_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_roles_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_roles_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/roles/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_roles_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_roles_id_edit_patch(id, opts = {})
      api_roles_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_roles_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_roles_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_roles_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_roles_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/roles/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_roles_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_roles_id_edit_put(id, opts = {})
      api_roles_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_roles_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_roles_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_roles_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_roles_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/roles/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_roles_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_roles_id_get(id, opts = {})
      api_roles_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_roles_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_roles_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_roles_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_roles_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/roles/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_roles_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_roles_new_post(opts = {})
      api_roles_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_roles_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_roles_new_post ...'
      end
      # resource path
      local_var_path = '/api/roles/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_roles_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_batch_delete_delete(opts = {})
      api_segments_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/segments/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_batch_edit_patch(opts = {})
      api_segments_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/segments/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_batch_edit_put(opts = {})
      api_segments_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/segments/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_batch_new_post(opts = {})
      api_segments_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/segments/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_get(opts = {})
      api_segments_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_get ...'
      end
      # resource path
      local_var_path = '/api/segments'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a lead to a list.
    # @param id 
    # @param lead_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_id_contact_lead_id_add_post(id, lead_id, opts = {})
      api_segments_id_contact_lead_id_add_post_with_http_info(id, lead_id, opts)
      nil
    end

    # Adds a lead to a list.
    # @param id 
    # @param lead_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_id_contact_lead_id_add_post_with_http_info(id, lead_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_id_contact_lead_id_add_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_segments_id_contact_lead_id_add_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_segments_id_contact_lead_id_add_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'lead_id' is set
      if @api_client.config.client_side_validation && lead_id.nil?
        fail ArgumentError, "Missing the required parameter 'lead_id' when calling DefaultApi.api_segments_id_contact_lead_id_add_post"
      end
      # resource path
      local_var_path = '/api/segments/{id}/contact/{leadId}/add'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'leadId' + '}', lead_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_id_contact_lead_id_add_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Removes given contact from a list.
    # @param id 
    # @param lead_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_id_contact_lead_id_remove_post(id, lead_id, opts = {})
      api_segments_id_contact_lead_id_remove_post_with_http_info(id, lead_id, opts)
      nil
    end

    # Removes given contact from a list.
    # @param id 
    # @param lead_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_id_contact_lead_id_remove_post_with_http_info(id, lead_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_id_contact_lead_id_remove_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_segments_id_contact_lead_id_remove_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_segments_id_contact_lead_id_remove_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'lead_id' is set
      if @api_client.config.client_side_validation && lead_id.nil?
        fail ArgumentError, "Missing the required parameter 'lead_id' when calling DefaultApi.api_segments_id_contact_lead_id_remove_post"
      end
      # resource path
      local_var_path = '/api/segments/{id}/contact/{leadId}/remove'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'leadId' + '}', lead_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_id_contact_lead_id_remove_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a leads to a list.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_id_contacts_add_post(id, opts = {})
      api_segments_id_contacts_add_post_with_http_info(id, opts)
      nil
    end

    # Adds a leads to a list.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_id_contacts_add_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_id_contacts_add_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_segments_id_contacts_add_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_segments_id_contacts_add_post, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/segments/{id}/contacts/add'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_id_contacts_add_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_id_delete_delete(id, opts = {})
      api_segments_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_segments_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_segments_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/segments/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_id_edit_patch(id, opts = {})
      api_segments_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_segments_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_segments_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/segments/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_id_edit_put(id, opts = {})
      api_segments_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_segments_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_segments_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/segments/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_id_get(id, opts = {})
      api_segments_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_segments_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_segments_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/segments/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_segments_new_post(opts = {})
      api_segments_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_segments_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_segments_new_post ...'
      end
      # resource path
      local_var_path = '/api/segments/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_segments_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_smses_batch_delete_delete(opts = {})
      api_smses_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_smses_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_smses_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/smses/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_smses_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_smses_batch_edit_patch(opts = {})
      api_smses_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_smses_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_smses_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/smses/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_smses_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_smses_batch_edit_put(opts = {})
      api_smses_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_smses_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_smses_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/smses/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_smses_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_smses_batch_new_post(opts = {})
      api_smses_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_smses_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_smses_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/smses/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_smses_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_smses_get(opts = {})
      api_smses_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_smses_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_smses_get ...'
      end
      # resource path
      local_var_path = '/api/smses'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_smses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_smses_id_contact_contact_id_send_get(id, contact_id, opts = {})
      api_smses_id_contact_contact_id_send_get_with_http_info(id, contact_id, opts)
      nil
    end

    # @param id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_smses_id_contact_contact_id_send_get_with_http_info(id, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_smses_id_contact_contact_id_send_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_smses_id_contact_contact_id_send_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_smses_id_contact_contact_id_send_get, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling DefaultApi.api_smses_id_contact_contact_id_send_get"
      end
      # resource path
      local_var_path = '/api/smses/{id}/contact/{contactId}/send'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_smses_id_contact_contact_id_send_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_smses_id_delete_delete(id, opts = {})
      api_smses_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_smses_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_smses_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_smses_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_smses_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/smses/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_smses_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_smses_id_edit_patch(id, opts = {})
      api_smses_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_smses_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_smses_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_smses_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_smses_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/smses/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_smses_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_smses_id_edit_put(id, opts = {})
      api_smses_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_smses_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_smses_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_smses_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_smses_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/smses/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_smses_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_smses_id_get(id, opts = {})
      api_smses_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_smses_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_smses_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_smses_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_smses_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/smses/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_smses_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_smses_new_post(opts = {})
      api_smses_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_smses_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_smses_new_post ...'
      end
      # resource path
      local_var_path = '/api/smses/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_smses_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stages_batch_delete_delete(opts = {})
      api_stages_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stages_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stages_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/stages/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stages_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stages_batch_edit_patch(opts = {})
      api_stages_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stages_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stages_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/stages/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stages_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stages_batch_edit_put(opts = {})
      api_stages_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stages_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stages_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/stages/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stages_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stages_batch_new_post(opts = {})
      api_stages_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stages_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stages_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/stages/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stages_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stages_get(opts = {})
      api_stages_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stages_get ...'
      end
      # resource path
      local_var_path = '/api/stages'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a contact to a list.
    # @param id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stages_id_contact_contact_id_add_post(id, contact_id, opts = {})
      api_stages_id_contact_contact_id_add_post_with_http_info(id, contact_id, opts)
      nil
    end

    # Adds a contact to a list.
    # @param id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stages_id_contact_contact_id_add_post_with_http_info(id, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stages_id_contact_contact_id_add_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_stages_id_contact_contact_id_add_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_stages_id_contact_contact_id_add_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling DefaultApi.api_stages_id_contact_contact_id_add_post"
      end
      # resource path
      local_var_path = '/api/stages/{id}/contact/{contactId}/add'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stages_id_contact_contact_id_add_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Removes given contact from a list.
    # @param id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stages_id_contact_contact_id_remove_post(id, contact_id, opts = {})
      api_stages_id_contact_contact_id_remove_post_with_http_info(id, contact_id, opts)
      nil
    end

    # Removes given contact from a list.
    # @param id 
    # @param contact_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stages_id_contact_contact_id_remove_post_with_http_info(id, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stages_id_contact_contact_id_remove_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_stages_id_contact_contact_id_remove_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_stages_id_contact_contact_id_remove_post, must conform to the pattern /\\d+/."
      end

      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling DefaultApi.api_stages_id_contact_contact_id_remove_post"
      end
      # resource path
      local_var_path = '/api/stages/{id}/contact/{contactId}/remove'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stages_id_contact_contact_id_remove_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stages_id_delete_delete(id, opts = {})
      api_stages_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stages_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stages_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_stages_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_stages_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/stages/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stages_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stages_id_edit_patch(id, opts = {})
      api_stages_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stages_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stages_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_stages_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_stages_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/stages/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stages_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stages_id_edit_put(id, opts = {})
      api_stages_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stages_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stages_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_stages_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_stages_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/stages/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stages_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stages_id_get(id, opts = {})
      api_stages_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stages_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stages_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_stages_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_stages_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/stages/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stages_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stages_new_post(opts = {})
      api_stages_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stages_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stages_new_post ...'
      end
      # resource path
      local_var_path = '/api/stages/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stages_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lists stats for a database table.
    # @param table 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_stats_table_get(table, opts = {})
      api_stats_table_get_with_http_info(table, opts)
      nil
    end

    # Lists stats for a database table.
    # @param table 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_stats_table_get_with_http_info(table, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_stats_table_get ...'
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling DefaultApi.api_stats_table_get"
      end
      # resource path
      local_var_path = '/api/stats/{table}'.sub('{' + 'table' + '}', table.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_stats_table_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tags_batch_delete_delete(opts = {})
      api_tags_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tags_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tags_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/tags/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tags_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tags_batch_edit_patch(opts = {})
      api_tags_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tags_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tags_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/tags/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tags_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tags_batch_edit_put(opts = {})
      api_tags_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tags_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tags_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/tags/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tags_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tags_batch_new_post(opts = {})
      api_tags_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tags_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tags_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/tags/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tags_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tags_get(opts = {})
      api_tags_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tags_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tags_get ...'
      end
      # resource path
      local_var_path = '/api/tags'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tags_id_delete_delete(id, opts = {})
      api_tags_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tags_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tags_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_tags_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_tags_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/tags/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tags_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tags_id_edit_patch(id, opts = {})
      api_tags_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tags_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tags_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_tags_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_tags_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/tags/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tags_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tags_id_edit_put(id, opts = {})
      api_tags_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tags_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tags_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_tags_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_tags_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/tags/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tags_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tags_id_get(id, opts = {})
      api_tags_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tags_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tags_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_tags_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_tags_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/tags/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tags_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tags_new_post(opts = {})
      api_tags_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tags_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tags_new_post ...'
      end
      # resource path
      local_var_path = '/api/tags/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tags_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List the folders (themes) in the /themes directory.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_themes_get(opts = {})
      api_themes_get_with_http_info(opts)
      nil
    end

    # List the folders (themes) in the /themes directory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_themes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_themes_get ...'
      end
      # resource path
      local_var_path = '/api/themes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_themes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Accepts the zip file and installs the theme from it.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_themes_new_post(opts = {})
      api_themes_new_post_with_http_info(opts)
      nil
    end

    # Accepts the zip file and installs the theme from it.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_themes_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_themes_new_post ...'
      end
      # resource path
      local_var_path = '/api/themes/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_themes_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a theme.
    # @param theme 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_themes_theme_delete_delete(theme, opts = {})
      api_themes_theme_delete_delete_with_http_info(theme, opts)
      nil
    end

    # Delete a theme.
    # @param theme 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_themes_theme_delete_delete_with_http_info(theme, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_themes_theme_delete_delete ...'
      end
      # verify the required parameter 'theme' is set
      if @api_client.config.client_side_validation && theme.nil?
        fail ArgumentError, "Missing the required parameter 'theme' when calling DefaultApi.api_themes_theme_delete_delete"
      end
      # resource path
      local_var_path = '/api/themes/{theme}/delete'.sub('{' + 'theme' + '}', theme.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_themes_theme_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get zip file of a theme.
    # @param theme 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_themes_theme_get(theme, opts = {})
      api_themes_theme_get_with_http_info(theme, opts)
      nil
    end

    # Get zip file of a theme.
    # @param theme 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_themes_theme_get_with_http_info(theme, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_themes_theme_get ...'
      end
      # verify the required parameter 'theme' is set
      if @api_client.config.client_side_validation && theme.nil?
        fail ArgumentError, "Missing the required parameter 'theme' when calling DefaultApi.api_themes_theme_get"
      end
      # resource path
      local_var_path = '/api/themes/{theme}'.sub('{' + 'theme' + '}', theme.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_themes_theme_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tweets_batch_delete_delete(opts = {})
      api_tweets_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tweets_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tweets_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/tweets/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tweets_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tweets_batch_edit_patch(opts = {})
      api_tweets_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tweets_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tweets_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/tweets/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tweets_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tweets_batch_edit_put(opts = {})
      api_tweets_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tweets_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tweets_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/tweets/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tweets_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tweets_batch_new_post(opts = {})
      api_tweets_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tweets_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tweets_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/tweets/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tweets_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tweets_get(opts = {})
      api_tweets_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tweets_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tweets_get ...'
      end
      # resource path
      local_var_path = '/api/tweets'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tweets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tweets_id_delete_delete(id, opts = {})
      api_tweets_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tweets_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tweets_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_tweets_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_tweets_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/tweets/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tweets_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tweets_id_edit_patch(id, opts = {})
      api_tweets_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tweets_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tweets_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_tweets_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_tweets_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/tweets/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tweets_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing entity or creates one on PUT if it doesn't exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tweets_id_edit_put(id, opts = {})
      api_tweets_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing entity or creates one on PUT if it doesn&#39;t exist.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tweets_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tweets_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_tweets_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_tweets_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/tweets/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tweets_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tweets_id_get(id, opts = {})
      api_tweets_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tweets_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tweets_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_tweets_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_tweets_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/tweets/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tweets_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_tweets_new_post(opts = {})
      api_tweets_new_post_with_http_info(opts)
      nil
    end

    # Creates a new entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_tweets_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_tweets_new_post ...'
      end
      # resource path
      local_var_path = '/api/tweets/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_tweets_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_batch_delete_delete(opts = {})
      api_users_batch_delete_delete_with_http_info(opts)
      nil
    end

    # Delete a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_batch_delete_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_batch_delete_delete ...'
      end
      # resource path
      local_var_path = '/api/users/batch/delete'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_batch_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_batch_edit_patch(opts = {})
      api_users_batch_edit_patch_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_batch_edit_patch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_batch_edit_patch ...'
      end
      # resource path
      local_var_path = '/api/users/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_batch_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_batch_edit_put(opts = {})
      api_users_batch_edit_put_with_http_info(opts)
      nil
    end

    # Edit a batch of entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_batch_edit_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_batch_edit_put ...'
      end
      # resource path
      local_var_path = '/api/users/batch/edit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_batch_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_batch_new_post(opts = {})
      api_users_batch_new_post_with_http_info(opts)
      nil
    end

    # Create a batch of new entities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_batch_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_batch_new_post ...'
      end
      # resource path
      local_var_path = '/api/users/batch/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_batch_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_get(opts = {})
      api_users_get_with_http_info(opts)
      nil
    end

    # Obtains a list of entities as defined by the API URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_get ...'
      end
      # resource path
      local_var_path = '/api/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_id_delete_delete(id, opts = {})
      api_users_id_delete_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an entity.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_id_delete_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_id_delete_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_users_id_delete_delete"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_users_id_delete_delete, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/users/{id}/delete'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_id_delete_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing user or creates a new one on PUT if not found.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_id_edit_patch(id, opts = {})
      api_users_id_edit_patch_with_http_info(id, opts)
      nil
    end

    # Edits an existing user or creates a new one on PUT if not found.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_id_edit_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_id_edit_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_users_id_edit_patch"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_users_id_edit_patch, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/users/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_id_edit_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits an existing user or creates a new one on PUT if not found.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_id_edit_put(id, opts = {})
      api_users_id_edit_put_with_http_info(id, opts)
      nil
    end

    # Edits an existing user or creates a new one on PUT if not found.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_id_edit_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_id_edit_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_users_id_edit_put"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_users_id_edit_put, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/users/{id}/edit'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_id_edit_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_id_get(id, opts = {})
      api_users_id_get_with_http_info(id, opts)
      nil
    end

    # Obtains a specific entity as defined by the API URL.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_users_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_users_id_get, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/users/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Verifies if a user has permission(s) to a action.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_id_permissioncheck_post(id, opts = {})
      api_users_id_permissioncheck_post_with_http_info(id, opts)
      nil
    end

    # Verifies if a user has permission(s) to a action.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_id_permissioncheck_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_id_permissioncheck_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.api_users_id_permissioncheck_post"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/\\d+/)
        fail ArgumentError, "invalid value for 'id' when calling DefaultApi.api_users_id_permissioncheck_post, must conform to the pattern /\\d+/."
      end

      # resource path
      local_var_path = '/api/users/{id}/permissioncheck'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_id_permissioncheck_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains a list of roles for user edits.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_list_roles_get(opts = {})
      api_users_list_roles_get_with_http_info(opts)
      nil
    end

    # Obtains a list of roles for user edits.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_list_roles_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_list_roles_get ...'
      end
      # resource path
      local_var_path = '/api/users/list/roles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_list_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_new_post(opts = {})
      api_users_new_post_with_http_info(opts)
      nil
    end

    # Creates a new user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_new_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_new_post ...'
      end
      # resource path
      local_var_path = '/api/users/new'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_new_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Obtains the logged in user's data.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_users_self_get(opts = {})
      api_users_self_get_with_http_info(opts)
      nil
    end

    # Obtains the logged in user&#39;s data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_users_self_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_users_self_get ...'
      end
      # resource path
      local_var_path = '/api/users/self'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_users_self_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
